name: Deploy to AWS

on:
  push:
    branches:
      - develop # on merge to main we will deploy to prod
  workflow_dispatch:  # we can manually trigger a deployment to dev from any branch

env:
  AWS_REGION: eu-west-2


jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build, tag, and push web image to Amazon ECR
        id: build-and-push-web
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
          ECR_REPOSITORY: i-dot-ai-one-big-thing
        with:
          file: docker/web/Dockerfile
          context: .
          push: true
          tags: "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
      # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.7

      - name: Set Environment
        id: set_env
        run: |
          if [ $GITHUB_REF == "refs/heads/develop" ]; then
            echo "::set-output name=env::prod"
          else
            echo "::set-output name=env::dev"
          fi
        shell: bash

      - name: Clone Terraform Repository
        uses: actions/checkout@v2
        with:
            repository: i-dot-ai/terraform-infrastructure
            ref: develop
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}

      - name: Terraform Init and Apply
        run: |
          cd terraform-infrastructure
          terraform -chdir=instances/one-big-thing workspace select ${{ steps.set_env.outputs.env }}
          terraform -chdir=instances/one-big-thing init
          terraform -chdir=instances/one-big-thing plan -var "image_tag=${{ env.IMAGE_TAG }}"
#          terraform -chdir=instances/one-big-thing apply -auto-approve -var "image_tag=${{ env.IMAGE_TAG }}"

#      - name: Update hash code in tf repo
#        run: |
#          echo '"image_tag = ${{ github.sha }}"' > temp.tfvars
#          grep -v '^image_tag' instances/one-big-thing/variables/${{ steps.set_env.outputs.env }}.tfvars > updated.tfvars
#          cat temp.tfvars >> updated.tfvars
#          mv updated.tfvars instances/one-big-thing/variables/${{ steps.set_env.outputs.env }}.tfvars
#
#          git add instances/one-big-thing/variables/${{ steps.set_env.outputs.env }}.tfvars
#          git commit -m"updated hash code"
#          git push
#
#          rm temp.tfvars
#          rm updated.tfvars

      - name: Clean Up Temporary Terraform Directory
        run: rm -rf terraform-infrastructure
